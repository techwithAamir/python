import hashlib
import re
import math
from collections import Counter
import mimetypes
from watchdog.observers import Observer
from watchdog.events import FileSystemEventHandler
import yara
import logging
import os
import sys
import argparse

# Set up logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

# Part 1: Signature-based detection using hashlib
def calculate_file_hash(file_path):
    """Calculates the SHA-256 hash of a file."""
    sha256_hash = hashlib.sha256()
    with open(file_path, "rb") as f:
        for byte_block in iter(lambda: f.read(4096), b""):
            sha256_hash.update(byte_block)
    return sha256_hash.hexdigest()

known_malware_hashes = {
    "example_malware_hash": "KnownMalwareName"  # Replace with actual known hashes
}

def check_file_against_signatures(file_path):
    """Checks a file against known malware hashes."""
    file_hash = calculate_file_hash(file_path)
    if file_hash in known_malware_hashes:
        logging.warning(f"Malware Detected: {known_malware_hashes[file_hash]} in {file_path}")
    else:
        logging.info(f"File {file_path} is clean based on signature analysis.")

# Part 2: Heuristic analysis using regex patterns
suspicious_patterns = [
    r'powershell\.exe',
    r'cmd\.exe',
    r'HKEY_LOCAL_MACHINE\\SOFTWARE',
    r'base64',
    r'exec\('
]

def heuristic_scan(file_path):
    """Scans a file for suspicious patterns."""
    try:
        with open(file_path, 'r', errors='ignore') as file:
            file_content = file.read()
            for pattern in suspicious_patterns:
                if re.search(pattern, file_content):
                    logging.warning(f"Suspicious pattern found: {pattern} in {file_path}")
    except Exception as e:
        logging.error(f"Unable to scan file {file_path} using heuristic analysis: {e}")

# Part 3: Entropy analysis to detect obfuscated or packed malware
def calculate_entropy(data):
    """Calculates the entropy of a dataset."""
    byte_counts = Counter(data)
    total_bytes = len(data)
    entropy = -sum((count / total_bytes) * math.log2(count / total_bytes) for count in byte_counts.values())
    return entropy

def scan_file_entropy(file_path):
    """Scans a file for high entropy."""
    try:
        with open(file_path, 'rb') as f:
            file_data = f.read()
            entropy = calculate_entropy(file_data)
            logging.info(f"Entropy for {file_path}: {entropy}")
            # Entropy over 7.5 is often indicative of obfuscated or packed data
            if entropy > 7.5:
                logging.warning(f"High entropy detected in {file_path}, possibly packed or encrypted.")
    except Exception as e:
        logging.error(f"Unable to calculate entropy for {file_path}: {e}")

# Part 4: File type verification
def check_file_extension(file_path):
    """Checks the MIME type of a file."""
    mime_type, _ = mimetypes.guess_type(file_path)
    if mime_type and mime_type.startswith('text'):
        logging.info(f"{file_path} is a text file.")
    else:
        logging.warning(f"{file_path} is suspicious, it may contain binary data.")

# Part 5: Real-time file monitoring using watchdog
class FileMonitorHandler(FileSystemEventHandler):
    def on_modified(self, event):
        if event.is_directory:
            return
        logging.info(f"Detected modification in {event.src_path}. Running malware scan...")
        scan_file(event.src_path)

def monitor_directory(path):
    """Monitors a directory for file changes."""
    event_handler = FileMonitorHandler()
    observer = Observer()
    observer.schedule(event_handler, path, recursive=False)
    observer.start()
    try:
        while True:
            pass
    except KeyboardInterrupt:
        observer.stop()
    observer.join()

# Part 6: YARA rule-based detection
def load_yara_rules(rule_file):
    """Loads YARA rules from a file."""
    try:
        rules = yara.compile(filepath=rule_file)
        return rules
    except yara.YaraSyntaxError as e:
        logging.error(f"YARA syntax error in {rule_file}: {e}")
        return None

def yara_scan(file_path, rules):
    """Scans a file using YARA rules."""
    try:
        matches = rules
        matches = rules.match(file_path)
        if matches:
            logging.warning(f"YARA Rule Match in {file_path}: {matches}")
        else:
            logging.info(f"No YARA matches found in {file_path}.")
    except Exception as e:
        logging.error(f"Error scanning {file_path} with YARA: {e}")

# Part 7: Full scan function
def scan_file(file_path):
    """Performs a full scan on the specified file."""
    logging.info(f"Scanning file: {file_path}")
    check_file_against_signatures(file_path)
    heuristic_scan(file_path)
    scan_file_entropy(file_path)
    check_file_extension(file_path)

    # Load YARA rules and run YARA scan
    yara_rules = load_yara_rules("rules.yara")
    if yara_rules:
        yara_scan(file_path, yara_rules)

# Main function
def main():
    """Main entry point of the script."""
    parser = argparse.ArgumentParser(description="Malware Detection Tool")
    parser.add_argument("target", help="File to scan or directory to monitor")
    args = parser.parse_args()

    target = args.target

    if os.path.isfile(target):
        # Scan a single file
        scan_file(target)
    elif os.path.isdir(target):
        # Monitor a directory
        logging.info(f"Monitoring directory: {target}")
        monitor_directory(target)
    else:
        logging.error(f"Invalid target: {target}")

if __name__ == "__main__":
    main()